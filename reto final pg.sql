CREATE TABLE CLIENTES (
    ID SERIAL PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    APELLIDO VARCHAR(100) NOT NULL,
    DIRECCION TEXT,
    TELEFONO VARCHAR(15),
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    FECHA_REGISTRO TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE PRODUCTOS (
    ID SERIAL PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    DESCRIPCION TEXT,
    PRECIO DECIMAL(10, 2) NOT NULL,
    STOCK INT NOT NULL CHECK (STOCK >= 0),
    CATEGORIA VARCHAR(50)
);
CREATE TABLE PEDIDOS (
    ID SERIAL PRIMARY KEY,
    CLIENTE_ID INT REFERENCES CLIENTES(ID) ON DELETE CASCADE,
    FECHA_PEDIDO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTADO VARCHAR(20) DEFAULT 'PROCESANDO',
    PRECIO_TOTAL DECIMAL(10, 2) NOT NULL
);

CREATE TABLE DETALLE_PEDIDOS (
    ID SERIAL PRIMARY KEY,
    PEDIDO_ID INT REFERENCES PEDIDOS(ID) ON DELETE CASCADE,
    PRODUCTO_ID INT REFERENCES PRODUCTOS(ID),
    CANTIDAD INT NOT NULL CHECK (CANTIDAD > 0),
    PRECIO_UNITARIO DECIMAL(10, 2) NOT NULL
);

CREATE TABLE RESEÑAS (
    ID SERIAL PRIMARY KEY,
    CLIENTE_ID INT REFERENCES CLIENTES(ID) ON DELETE CASCADE,
    PRODUCTO_ID INT REFERENCES PRODUCTOS(ID),
    CALIFICACION INT CHECK (CALIFICACION >= 1 AND CALIFICACION <= 5),
    COMENTARIO TEXT,
    FECHA TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE LISTA_DESEOS (
    ID SERIAL PRIMARY KEY,
    CLIENTE_ID INT REFERENCES CLIENTES(ID) ON DELETE CASCADE,
    PRODUCTO_ID INT REFERENCES PRODUCTOS(ID),
    FECHA_AGREGADO TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


SELECT P.NOMBRE, SUM(DP.CANTIDAD) AS TOTAL_VENDIDO
FROM DETALLE_PEDIDOS DP
JOIN PRODUCTOS P ON DP.PRODUCTO_ID = P.ID
GROUP BY P.NOMBRE
ORDER BY TOTAL_VENDIDO DESC
LIMIT 10;

SELECT P.ID AS PEDIDO_ID, P.FECHA_PEDIDO, P.ESTADO, DP.PRODUCTO_ID, PROD.NOMBRE AS NOMBRE_PRODUCTO, DP.CANTIDAD, DP.PRECIO_UNITARIO
FROM PEDIDOS P
JOIN DETALLE_PEDIDOS DP ON P.ID = DP.PEDIDO_ID
JOIN PRODUCTOS PROD ON DP.PRODUCTO_ID = PROD.ID
WHERE P.CLIENTE_ID = 1 -- REEMPLAZAR CON EL ID DEL CLIENTE ESPECÍFICO
ORDER BY P.FECHA_PEDIDO DESC;

SELECT ID, NOMBRE, STOCK
FROM PRODUCTOS
WHERE STOCK < 10 -- REEMPLAZAR CON EL NIVEL CRÍTICO DESEADO
ORDER BY STOCK ASC;

SELECT DATE(P.FECHA_PEDIDO) AS FECHA, SUM(DP.CANTIDAD * DP.PRECIO_UNITARIO) AS INGRESOS_DIARIOS
FROM PEDIDOS P
JOIN DETALLE_PEDIDOS DP ON P.ID = DP.PEDIDO_ID
WHERE P.FECHA_PEDIDO BETWEEN '2024-08-01' AND '2024-08-31' -- REEMPLAZAR CON EL RANGO DE FECHAS DESEADO
GROUP BY DATE(P.FECHA_PEDIDO)
ORDER BY FECHA ASC;

SELECT P.NOMBRE, AVG(R.CALIFICACION) AS CALIFICACION_PROMEDIO
FROM PRODUCTOS P
LEFT JOIN RESEÑAS R ON P.ID = R.PRODUCTO_ID
GROUP BY P.NOMBRE
ORDER BY CALIFICACION_PROMEDIO DESC
LIMIT 10;




CREATE OR REPLACE PROCEDURE REGISTRAR_PEDIDO(
    IN P_CLIENTE_ID INT,
    IN P_PRODUCTOS JSON
)
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_PEDIDO_ID INT;
    V_PRECIO_TOTAL DECIMAL(10, 2) := 0;
    V_PRECIO_UNITARIO DECIMAL(10, 2);
    V_CANTIDAD INT;
    V_PRODUCTO_ID INT;
BEGIN
    INSERT INTO PEDIDOS(CLIENTE_ID, PRECIO_TOTAL)
    VALUES (P_CLIENTE_ID, 0)
    RETURNING ID INTO V_PEDIDO_ID;

    FOR V_PRODUCTO_ID, V_CANTIDAD IN
        SELECT (P_PRODUCTOS->>I)::INT AS PRODUCTO_ID, (P_PRODUCTOS->>'CANTIDAD')::INT AS CANTIDAD
        FROM JSON_ARRAY_ELEMENTS(P_PRODUCTOS)
    LOOP
        SELECT PRECIO INTO V_PRECIO_UNITARIO
        FROM PRODUCTOS
        WHERE ID = V_PRODUCTO_ID;

        INSERT INTO DETALLE_PEDIDOS(PEDIDO_ID, PRODUCTO_ID, CANTIDAD, PRECIO_UNITARIO)
        VALUES (V_PEDIDO_ID, V_PRODUCTO_ID, V_CANTIDAD, V_PRECIO_UNITARIO);

        UPDATE PRODUCTOS
        SET STOCK = STOCK - V_CANTIDAD
        WHERE ID = V_PRODUCTO_ID;

        V_PRECIO_TOTAL := V_PRECIO_TOTAL + (V_PRECIO_UNITARIO * V_CANTIDAD);
    END LOOP;

    UPDATE PEDIDOS
    SET PRECIO_TOTAL = V_PRECIO_TOTAL
    WHERE ID = V_PEDIDO_ID;

    RAISE NOTICE 'PEDIDO REGISTRADO CON ID: %', V_PEDIDO_ID;
END $$;

CREATE OR REPLACE PROCEDURE CONSULTAR_PEDIDOS_CLIENTE(
    IN P_CLIENTE_ID INT,
    IN P_FECHA_INICIO DATE,
    IN P_FECHA_FIN DATE
)
LANGUAGE PLPGSQL
AS $$
BEGIN
    SELECT * FROM PEDIDOS
    WHERE CLIENTE_ID = P_CLIENTE_ID
    AND FECHA_PEDIDO BETWEEN P_FECHA_INICIO AND P_FECHA_FIN;
END $$;

CREATE OR REPLACE PROCEDURE INFORME_INVENTARIO_BAJO(
    IN P_NIVEL_CRITICO INT
)
LANGUAGE PLPGSQL
AS $$
BEGIN
    SELECT ID, NOMBRE, STOCK 
    FROM PRODUCTOS
    WHERE STOCK < P_NIVEL_CRITICO;
END $$;


CREATE OR REPLACE PROCEDURE ACTUALIZAR_CLIENTE(
    IN P_CLIENTE_ID INT,
    IN P_NOMBRE VARCHAR(100),
    IN P_APELLIDO VARCHAR(100),
    IN P_DIRECCION TEXT,
    IN P_TELEFONO VARCHAR(15),
    IN P_EMAIL VARCHAR(100)
)
LANGUAGE PLPGSQL
AS $$
BEGIN
    UPDATE CLIENTES
    SET NOMBRE = P_NOMBRE,
        APELLIDO = P_APELLIDO,
        DIRECCION = P_DIRECCION,
        TELEFONO = P_TELEFONO,
        EMAIL = P_EMAIL
    WHERE ID = P_CLIENTE_ID;

    RAISE NOTICE 'INFORMACIÓN DEL CLIENTE CON ID % ACTUALIZADA.', P_CLIENTE_ID;
END $$;

CREATE OR REPLACE PROCEDURE OBTENER_RESEÑAS_PRODUCTO(
    IN P_PRODUCTO_ID INT
)
LANGUAGE PLPGSQL
AS $$
BEGIN
    SELECT R.CALIFICACION, R.COMENTARIO, R.FECHA, C.NOMBRE, C.APELLIDO
    FROM RESEÑAS R
    JOIN CLIENTES C ON R.CLIENTE_ID = C.ID
    WHERE R.PRODUCTO_ID = P_PRODUCTO_ID
    ORDER BY R.FECHA DESC;
END $$;


CREATE OR REPLACE FUNCTION CALCULAR_PRECIO_TOTAL_PEDIDO(P_PEDIDO_ID INT)
RETURNS DECIMAL(10, 2)
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_PRECIO_TOTAL DECIMAL(10, 2);
BEGIN
    SELECT SUM(DP.CANTIDAD * DP.PRECIO_UNITARIO) INTO V_PRECIO_TOTAL
    FROM DETALLE_PEDIDOS DP
    WHERE DP.PEDIDO_ID = P_PEDIDO_ID;

    RETURN COALESCE(V_PRECIO_TOTAL, 0);
END $$;

CREATE OR REPLACE FUNCTION VERIFICAR_DISPONIBILIDAD_PRODUCTO(P_PRODUCTO_ID INT, P_CANTIDAD INT)
RETURNS BOOLEAN
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_STOCK_ACTUAL INT;
BEGIN
    SELECT STOCK INTO V_STOCK_ACTUAL
    FROM PRODUCTOS
    WHERE ID = P_PRODUCTO_ID;

    RETURN V_STOCK_ACTUAL >= P_CANTIDAD;
END $$;

CREATE OR REPLACE FUNCTION CALCULAR_CALIFICACION_PROMEDIO_PRODUCTO(P_PRODUCTO_ID INT)
RETURNS DECIMAL(3, 2)
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_CALIFICACION_PROMEDIO DECIMAL(3, 2);
BEGIN
    SELECT AVG(R.CALIFICACION)::DECIMAL(3, 2) INTO V_CALIFICACION_PROMEDIO
    FROM RESEÑAS R
    WHERE R.PRODUCTO_ID = P_PRODUCTO_ID;

    RETURN COALESCE(V_CALIFICACION_PROMEDIO, 0);
END $$;

CREATE OR REPLACE FUNCTION CONTAR_PEDIDOS_CLIENTE(P_CLIENTE_ID INT)
RETURNS INT
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_NUMERO_PEDIDOS INT;
BEGIN
    SELECT COUNT(*) INTO V_NUMERO_PEDIDOS
    FROM PEDIDOS
    WHERE CLIENTE_ID = P_CLIENTE_ID;

    RETURN V_NUMERO_PEDIDOS;
END $$;

CREATE OR REPLACE FUNCTION CALCULAR_VALOR_LISTA_DESEOS(P_CLIENTE_ID INT)
RETURNS DECIMAL(10, 2)
LANGUAGE PLPGSQL
AS $$
DECLARE
    V_VALOR_TOTAL DECIMAL(10, 2);
BEGIN
    SELECT SUM(P.PRECIO) INTO V_VALOR_TOTAL
    FROM LISTA_DESEOS LD
    JOIN PRODUCTOS P ON LD.PRODUCTO_ID = P.ID
    WHERE LD.CLIENTE_ID = P_CLIENTE_ID;

    RETURN COALESCE(V_VALOR_TOTAL, 0);
END $$;

